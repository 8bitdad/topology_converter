# Created by Topology-Converter v{{ version }}
#    using topology data from: {{ topology_file }}
#    NOTE: in order to use this Vagrantfile you will need:
#       -Vagrant(v1.8.1+) installed: http://www.vagrantup.com/downloads
#       -Cumulus Plugin for Vagrant installed: $ vagrant plugin install vagrant-cumulus
#       -the "helper_scripts" directory that comes packaged with topology-converter.py
{% if provider == 'virtualbox' %}#       -Virtualbox installed: https://www.virtualbox.org/wiki/Downloads

{% elif provider == 'libvirt' %}#        -Libvirt Installed -- guide to come
#       -Vagrant-Libvirt Plugin installed: $ vagrant plugin install vagrant-libvirt
#       -Boxes which have been mutated to support Libvirt -- see guide below:
#            https://community.cumulusnetworks.com/cumulus/topics/converting-cumulus-vx-virtualbox-vagrant-box-gt-libvirt-vagrant-box
#       -Start with \"vagrant up --provider=libvirt --no-parallel\n")

raise "vagrant-libvirt plugin must be installed, try $ vagrant plugin install vagrant-libvirt" unless Vagrant.has_plugin? "vagrant-libvirt"
{% endif %}raise "vagrant-cumulus plugin must be installed, try $ vagrant plugin install vagrant-cumulus" unless Vagrant.has_plugin? "vagrant-cumulus"

$script = <<-SCRIPT
if grep -q -i 'cumulus' /etc/lsb-release &> /dev/null; then
    echo "### RUNNING CUMULUS EXTRA CONFIG ###"
    source /etc/lsb-release
    if [[ $DISTRIB_RELEASE =~ ^2.* ]]; then
        echo "  INFO: Detected a 2.5.x Based Release"
        echo "  adding fake cl-acltool..."
        echo -e "#!/bin/bash\nexit 0" > /bin/cl-acltool
        chmod 755 /bin/cl-acltool

        echo "  adding fake cl-license..."
        echo -e "#!/bin/bash\nexit 0" > /bin/cl-license
        chmod 755 /bin/cl-license

        echo "  Disabling default remap on Cumulus VX..."
        mv -v /etc/init.d/rename_eth_swp /etc/init.d/rename_eth_swp.backup

    elif [[ $DISTRIB_RELEASE =~ ^3.* ]]; then
        echo "  INFO: Detected a 3.x Based Release"

        echo "  Disabling default remap on Cumulus VX..."
        mv -v /etc/hw_init.d/S10rename_eth_swp.sh /etc/S10rename_eth_swp.sh.backup

    fi
    echo "### DONE ###"
fi
SCRIPT


Vagrant.configure("2") do |config|
  wbid = {{ epoch_time }}
{% if provider == 'virtualbox' %}
  config.vm.provider "virtualbox" do |v|
    v.gui=false
{% elif provider == 'libvirt' %}
  config.vm.provider :libvirt do |domain|
    # increase nic adapter count to be greater than 8 for all VMs.
    domain.nic_adapter_count = 55{% endif %}
  end{% if generate_ansible_hostfile == True %}

  #Generating Ansible Host File at following location:
  #    ./.vagrant/provisioners/ansible/inventory/vagrant_ansible_inventory
  config.vm.provision "ansible" do |ansible|
    ansible.playbook = "./helper_scripts/empty_playbook.yml"
  end{% endif %}

{% for device in devices %}
  ##### DEFINE VM for {{ device.hostname }} #####
  config.vm.define "{{ device.hostname }}" do |device|
    device.vm.hostname = "{{ device.hostname }}"
    device.vm.box = "{{ device.os }}"
{% if provider == 'virtualbox' %}    device.vm.provider "virtualbox" do |v|
      v.name = "{{ epoch_time }}_{{ device.hostname }}"{% elif provider == 'libvirt' %}    # disabling sync folder support on all VMs
    #   see note here: https://github.com/pradels/vagrant-libvirt#synced-folders
    device.vm.synced_folder '.', '/vagrant', :disabled => true
    device.vm.provider :libvirt do |v|{% endif %}
      v.memory = {{ device.memory }}
    end{% if synced_folder == False %}
    device.vm.synced_folder ".", "/vagrant", disabled: true{% endif %}{% if device.ubuntu == "True" %}
      # UBUNTU DEVICES ONLY: Shorten Boot Process - remove \"Wait for Network
      device.vm.provision :shell , inline: "sed -i 's/sleep [0-9]*/sleep 1/' /etc/init/failsafe.conf"{% endif %}

    # NETWORK INTERFACES{% for link in device.interfaces %}
      # link for {{ link.local_interface }} --> {{ link.remote_device }}:{{ link.remote_interface }}
      {% if provider == 'virtualbox' %}device.vm.network "private_network", virtualbox__intnet: "#{wbid}_{{ link.network }}", auto_config: false , :mac => "{{ link.mac|replace(':', '') }}"
      {% elif provider == 'libvirt' %}device.vm.network "private_network",
            :mac => "{{ link.mac|replace(':', '') }}",
            :libvirt__tunnel_type => 'udp',
            :libvirt__tunnel_local_ip => '{{ link.local_ip }}',
            :libvirt__tunnel_local_port => '{{ link.local_port }}',
            :libvirt__tunnel_ip => '{{ link.remote_ip }}',
            :libvirt__tunnel_port => '{{ link.remote_port }}',
            :libvirt__iface_name => '{{ link.local_interface }}',
            auto_config: false{% endif %}{% endfor %}

{% if provider == 'virtualbox' %}    device.vm.provider "virtualbox" do |vbox|{% for i in range(2, 2+device.interfaces.__len__()) %}
      vbox.customize ['modifyvm', :id, '--nicpromisc{{i}}', 'allow-vms']{% endfor %}
      vbox.customize ["modifyvm", :id, "--nictype1", "virtio"]{% if device.pxehost=="True" %}

      #Setup Interfaces for PXEBOOT
        #Adding network as a boot option.
        vbox.customize ["modifyvm", :id, "--boot4", "net"]

        #Setting Vagrant interface to lowest boot preference
        vbox.customize ["modifyvm", :id, "--nicbootprio1", "0"]
{% for link in device.interfaces %}{% if link.pxebootinterface %}{% if link.pxebootinterface == "True" %}
        #Setting Specified interface to highest preference.
        vbox.customize ["modifyvm", :id, "--nicbootprio{{loop.index+1}}", "1"]{% endif %}{% endif %}{% endfor %}{% endif %}
    end{% endif %}

    # Fixes "stdin: is not a tty" message --> https://github.com/mitchellh/vagrant/issues/1673
    device.vm.provision :shell , inline: "(grep -q -E '^mesg n$' /root/.profile && sed -i 's/^mesg n$/tty -s \\&\\& mesg n/g' /root/.profile && echo 'Ignore the previous error \"stdin: is not a tty\" -- fixing this now...') || exit 0;"

    # Run Extra Cumulus Specific Config
    device.vm.provision :shell , :inline => $script
{% if device.config is defined %}
    # Run the Config specified in the Node Attributes
    device.vm.provision :shell , path: "{{ device.config }}"{% endif %}

    # Install Rules for the interface re-map
      device.vm.provision "file", source: "{{ script_storage }}/apply_udev.py", destination: "/home/vagrant/apply_udev.py"
      device.vm.provision :shell , inline: "chmod 755 /home/vagrant/apply_udev.py"
{% for link in device.interfaces %}
      device.vm.provision :shell , inline: "/home/vagrant/apply_udev.py -a {{ link.mac }} {{ link.local_interface }}"{% endfor %}

      device.vm.provision :shell , inline: "/home/vagrant/apply_udev.py -vm {% if device.vagrant %}{% if device.vagrant=='eth0' %}-nv{%else%}--vagrant-name={{device.vagrant}}{% endif%}{% endif%}"
      device.vm.provision :shell , inline: "/home/vagrant/apply_udev.py -s"

{% if device.playbook is defined %}
    # Ansible Playbook Configuration
    device.vm.provision "ansible" do |ansible|
          ansible.playbook = "{{ device.playbook }}"
    end{% endif %}

    # Apply the interface re-map /w a Reboot
      device.vm.provision :shell , inline: "reboot"
{# {% else %}      device.vm.provision :shell , inline: "/home/vagrant/apply_udev.py --apply"  {% endif %} #}
  end
{% endfor %}


end
